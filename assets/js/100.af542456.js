(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{509:function(t,a,s){"use strict";s.r(a);var n=s(42),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"modern-java-recipe"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#modern-java-recipe"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://book.douban.com/subject/27088096/",target:"_blank",rel:"noopener noreferrer"}},[t._v("modern-java-recipe"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"the-basics"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-basics"}},[t._v("#")]),t._v(" The Basics")]),t._v(" "),s("ul",[s("li",[t._v("Lambda Expressions")]),t._v(" "),s("li",[t._v("Method References")]),t._v(" "),s("li",[t._v("Constructor References ( a special case of Method Reference )")]),t._v(" "),s("li",[t._v("Functional Interfaces")]),t._v(" "),s("li",[t._v("Default Methods in Interfaces")]),t._v(" "),s("li",[t._v("Static Methods in Interfaces")])]),t._v(" "),s("h2",{attrs:{id:"the-java-util-function-package"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-java-util-function-package"}},[t._v("#")]),t._v(" The java.util.function Package")]),t._v(" "),s("ul",[s("li",[t._v("Consumer")]),t._v(" "),s("li",[t._v("Supplier")]),t._v(" "),s("li",[t._v("Predicate")]),t._v(" "),s("li",[t._v("Function")])]),t._v(" "),s("h2",{attrs:{id:"streams"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#streams"}},[t._v("#")]),t._v(" Streams")]),t._v(" "),s("ul",[s("li",[t._v("Creating Streams\n"),s("ul",[s("li",[t._v("Stream.of")]),t._v(" "),s("li",[t._v("Stream.iterate")]),t._v(" "),s("li",[t._v("Stream.generate")]),t._v(" "),s("li",[t._v("Arrays.stream")]),t._v(" "),s("li",[t._v("Collection.stream")]),t._v(" "),s("li",[t._v("IntStream.range IntStream.rangeClosed")])])]),t._v(" "),s("li",[t._v("Boxed Streams\n"),s("ul",[s("li",[t._v("IntStream.boxed")]),t._v(" "),s("li",[t._v("IntStream.mapToObj")])])]),t._v(" "),s("li",[t._v("Reduction Oprations Using Reduce\n"),s("ul",[s("li",[t._v("reduce")]),t._v(" "),s("li",[t._v("count")]),t._v(" "),s("li",[t._v("max")]),t._v(" "),s("li",[t._v("min")]),t._v(" "),s("li",[t._v("average")]),t._v(" "),s("li",[t._v("collect")])])]),t._v(" "),s("li",[t._v("Check Sorting Using Reduce ( BinaryOperator assert and return current )")]),t._v(" "),s("li",[t._v("Debugging Streams with peek ( peek intermediate operation)")]),t._v(" "),s("li",[t._v("Converting Strings to Streams and Back")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isPalindrome")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" forward "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("codePoints")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isLetterOrDigit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("collect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendCodePoint")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" backward "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("forward"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" forward"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("backward"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("Counting Elements\n"),s("ul",[s("li",[t._v("count terminal operator")]),t._v(" "),s("li",[t._v("Collectors.counting()")])])]),t._v(" "),s("li",[t._v("Summary Statistics (  summaryStatistics terminal operator  )")]),t._v(" "),s("li",[t._v("Finding the first Element in a Stream ( findFirst findAny )")]),t._v(" "),s("li",[t._v("Using anyMatch allMatch noneMatch")]),t._v(" "),s("li",[t._v("Stream flatMap Versus map ( use flatMap to flatten substream into one stream )")]),t._v(" "),s("li",[t._v("Concatenating Streams ( using static method Stream.concat to concat 2 streams )")]),t._v(" "),s("li",[t._v("Lazy Streams ( streams are already lazy )")])]),t._v(" "),s("h2",{attrs:{id:"comparators-and-collectors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#comparators-and-collectors"}},[t._v("#")]),t._v(" Comparators and Collectors")]),t._v(" "),s("ul",[s("li",[t._v("Sorting using a Comparator")]),t._v(" "),s("li",[t._v("Converting a Stream into a Collection ( toList toSet toCollection )")]),t._v(" "),s("li",[t._v("Adding a Linear Collection to a Map ( Function.identity )")]),t._v(" "),s("li",[t._v("Sorting Maps ( Map.Entry.comparingByKey Map.Entry.comparingByValue )")]),t._v(" "),s("li",[t._v("Partitioning and Grouping")]),t._v(" "),s("li",[t._v("Downstream Collectors")]),t._v(" "),s("li",[t._v("Finding Max and Min Values\n"),s("ul",[s("li",[t._v("max terminal operator")]),t._v(" "),s("li",[t._v("min terminal operator")]),t._v(" "),s("li",[t._v("Collectors.maxBy")]),t._v(" "),s("li",[t._v("Collectors.minBy")])])]),t._v(" "),s("li",[t._v("Creading Immutable Collections")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createImmutableList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("collect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collectors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUnmodifiableList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createImmutableSet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("collect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collectors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUnmodifiableSet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("Implementing the Collector Interface")])]),t._v(" "),s("h2",{attrs:{id:"issues-with-streams-lambdas-and-method-references"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#issues-with-streams-lambdas-and-method-references"}},[t._v("#")]),t._v(" Issues with Streams, Lambdas, and Method References")]),t._v(" "),s("ul",[s("li",[t._v("The java.util.Objects Class ( some useful utility method)\n"),s("ul",[s("li",[t._v("requireNotNull")]),t._v(" "),s("li",[t._v("isNull")]),t._v(" "),s("li",[t._v("nonNull")])])]),t._v(" "),s("li",[t._v("Lambdas and Effectively Final")]),t._v(" "),s("li",[t._v("Streams of Random Numbers ( Use the static ints, longs and doubles methods in java.util.Random )")]),t._v(" "),s("li",[t._v("Default Methods in Map\n"),s("ul",[s("li",[t._v("computeIfAbsent")]),t._v(" "),s("li",[t._v("computeIfPresent")]),t._v(" "),s("li",[t._v("forEach")]),t._v(" "),s("li",[t._v("getOrDefault")]),t._v(" "),s("li",[t._v("merge")]),t._v(" "),s("li",[t._v("putIfAbsent")]),t._v(" "),s("li",[t._v("remove")]),t._v(" "),s("li",[t._v("replace")]),t._v(" "),s("li",[t._v("replaceAll")])])]),t._v(" "),s("li",[t._v("Default Method Conflict\n"),s("ul",[s("li",[t._v("In any conflict between a method in a class and a default method in an interface, the class always wins.")]),t._v(" "),s("li",[t._v("If the conflict comes between two interfaces where one is a descendant of the other, then the descendant wins, the same way they do in classes")]),t._v(" "),s("li",[t._v("If there is no inheritance relationship between the two defaults, the class will not compile")])])]),t._v(" "),s("li",[t._v("Iterating Over Collections and Maps ( forEach method )")]),t._v(" "),s("li",[t._v("Logging with a Supplier")]),t._v(" "),s("li",[t._v("Closure Composition\n"),s("ul",[s("li",[t._v("compose in Function")]),t._v(" "),s("li",[t._v("andThen in Function")]),t._v(" "),s("li",[t._v("andThen in Consumer")]),t._v(" "),s("li",[t._v("and in Predicate")]),t._v(" "),s("li",[t._v("or in Predicate")]),t._v(" "),s("li",[t._v("negate in Predicate")])])])]),t._v(" "),s("h2",{attrs:{id:"the-optional-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-optional-type"}},[t._v("#")]),t._v(" The Optional Type")]),t._v(" "),s("ul",[s("li",[t._v("Creating an Optional\n"),s("ul",[s("li",[t._v("Optional.empty")]),t._v(" "),s("li",[t._v("Optional.of")]),t._v(" "),s("li",[t._v("Optional.ofNullable")])])]),t._v(" "),s("li",[t._v("Retrieving Values from an Optional\n"),s("ul",[s("li",[t._v("get")]),t._v(" "),s("li",[t._v("ifPresent")]),t._v(" "),s("li",[t._v("orElse")]),t._v(" "),s("li",[t._v("orElseGet")]),t._v(" "),s("li",[t._v("orElseThrow")])])]),t._v(" "),s("li",[t._v("Optional in Getters and Setters ( wrap the result of getter methods in Optionals, but don't do the same for setters ) ( not follow javabean convention )")]),t._v(" "),s("li",[t._v("Optional flatMap Versus map ( use flatMap to avoid wrapping an Optional inside another Optional )")]),t._v(" "),s("li",[t._v("Mapping Optional ( map and stream )")])])])}),[],!1,null,null,null);a.default=e.exports}}]);