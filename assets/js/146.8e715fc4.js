(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{563:function(e,t,r){"use strict";r.r(t);var a=r(42),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"跨站点请求伪造-csrf"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#跨站点请求伪造-csrf"}},[e._v("#")]),e._v(" 跨站点请求伪造(CSRF)")]),e._v(" "),r("h2",{attrs:{id:"跨站点请求伪造成因"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#跨站点请求伪造成因"}},[e._v("#")]),e._v(" 跨站点请求伪造成因")]),e._v(" "),r("p",[e._v("首先，用户在正常网站A登录，获取到cookie。然后用户被诱导到hacker网站，黑客网站会发起对A网站接口的请求(比如通过图片、iframe或者表单发起post请求)，此时发起的请求会带着A网站的cookie。")]),e._v(" "),r("h2",{attrs:{id:"csrf防御"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#csrf防御"}},[e._v("#")]),e._v(" CSRF防御")]),e._v(" "),r("h3",{attrs:{id:"referer-check"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#referer-check"}},[e._v("#")]),e._v(" Referer Check")]),e._v(" "),r("p",[e._v("服务器端校验HTTP请求的Referer字段，如果不是允许的业务页面，则判定为CSRF攻击。")]),e._v(" "),r("p",[e._v("这个方法的缺陷是浏览器可能不会发送Referer，可能会错杀。")]),e._v(" "),r("h3",{attrs:{id:"csrf-token"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#csrf-token"}},[e._v("#")]),e._v(" CSRF Token")]),e._v(" "),r("p",[e._v("重要操作前端的提交参数加一个后端生成的随机数字段(csrf token)，然后后端校验这个随机数。这样跨站点伪造的请求因为无法构造正确的随机数字段，因而提交无效。")]),e._v(" "),r("h3",{attrs:{id:"samesite-cookie"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#samesite-cookie"}},[e._v("#")]),e._v(" SameSite Cookie")]),e._v(" "),r("p",[e._v("cookie的sameSite属性可以控制在非同源请求中，是否允许带上cookie。有三个可选值：")]),e._v(" "),r("ul",[r("li",[e._v("Strict，严格不允许第三方网站带上cookie")]),e._v(" "),r("li",[e._v("Lax，仅允许第三方网站在 链接、预加载、GET表单携带cookie")]),e._v(" "),r("li",[e._v("None，允许发送cookie")])]),e._v(" "),r("p",[e._v("要是项目仅在一个特定域名下运行，cookie的sameSite设置为Strict完全可以")])])}),[],!1,null,null,null);t.default=s.exports}}]);